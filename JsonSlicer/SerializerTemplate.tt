<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

namespace JsonSlicer.GeneratedSerializers 
{
  using global::System.Buffers;
  using static global::JsonSlicer.JsonWriter;

  public class <#= SerializerName #> : global::JsonSlicer.IJsonWriter<global::<#= SerializedType.FullName #>>
  {
    public global::System.Threading.Tasks.ValueTask Write(object obj, System.IO.Pipelines.PipeWriter pipeWriter)
    {
		if(obj is global::<#= SerializedType.FullName #> casted)
			Write(casted, pipeWriter);
		else
			throw new System.ArgumentException($"Expected obj to be of type <#= SerializedType.FullName #> but received {obj.GetType()}");
        return default; 
    }

    public global::System.Threading.Tasks.ValueTask Write(global::<#= SerializedType.FullName #> obj, System.IO.Pipelines.PipeWriter pipeWriter)
    {
		<# WriteTemplate(SerializedType); #>
    }
  }
}

<#+
	private void WriteTemplate(Type type)
	{
		if (KnownTypes.Contains(type) )
		{ #>
			WritePrimitive(obj, pipeWriter);
	 <#+ }  #>
		return default;
<#+ }
#>